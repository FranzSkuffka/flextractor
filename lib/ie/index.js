// Generated by CoffeeScript 1.10.0
(function() {
  var Dataset, _, associate, fillForms;

  associate = require('./associator/index');

  Dataset = require('./Dataset');

  _ = require('underscore');

  fillForms = function(domainTypes, labels, entities) {
    var associatedEntities, dataset, datasets, entitiesByLabel, entityList, findRelationType, flattenedEntities, getRelationId, i, label, len, listName, relationId, relationType;
    findRelationType = function(domainTypes, label) {
      var domainType, i, len;
      for (i = 0, len = domainTypes.length; i < len; i++) {
        domainType = domainTypes[i];
        if (label === domainType.name) {
          return domainType.relation;
        }
      }
    };
    getRelationId = function(datasets, type, domainTypes) {
      var dataset, domainType, field, i, idField, j, k, l, len, len1, len2, len3, ref, ref1;
      for (i = 0, len = datasets.length; i < len; i++) {
        dataset = datasets[i];
        if (dataset.type === type) {
          for (j = 0, len1 = domainTypes.length; j < len1; j++) {
            domainType = domainTypes[j];
            if (domainType.name === type) {
              ref = domainType.fields;
              for (k = 0, len2 = ref.length; k < len2; k++) {
                field = ref[k];
                idField = null;
                if (field.required === true) {
                  idField = field.name;
                }
                if (idField != null) {
                  ref1 = dataset.data;
                  for (l = 0, len3 = ref1.length; l < len3; l++) {
                    field = ref1[l];
                    if (field.name === idField) {
                      return field.value;
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    datasets = [];
    entities = associate(domainTypes, labels, entities);
    delete entities[void 0];
    flattenedEntities = [];
    for (listName in entities) {
      entityList = entities[listName];
      flattenedEntities = flattenedEntities.concat(entityList);
    }
    entitiesByLabel = _.groupBy(flattenedEntities, function(entity) {
      return entity.target.label;
    });
    for (label in entitiesByLabel) {
      associatedEntities = entitiesByLabel[label];
      dataset = new Dataset(label, associatedEntities);
      datasets.push(dataset);
    }
    for (i = 0, len = datasets.length; i < len; i++) {
      dataset = datasets[i];
      relationType = findRelationType(domainTypes, dataset.type);
      if (relationType != null) {
        relationId = getRelationId(datasets, relationType, domainTypes);
        if (relationId != null) {
          dataset.addRelation(relationId);
        }
      }
    }
    return datasets;
  };

  module.exports = fillForms;

}).call(this);

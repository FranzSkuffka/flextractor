// Generated by CoffeeScript 1.10.0
(function() {
  var disambiguate, findEmailTargets;

  disambiguate = {};

  disambiguate.phoneNumber = function(phoneNumberList) {
    var phoneNumbersWithTargets, target;
    phoneNumbersWithTargets = [];
    if (phoneNumberList.length === 1) {
      target = {};
      target.label = 'Account';
      target.field = 'phoneNumber';
      phoneNumberList[0].target = target;
      phoneNumbersWithTargets.push(phoneNumberList[0]);
      return phoneNumbersWithTargets;
    }
    if (phoneNumberList.length === 2) {
      return phoneNumberList;
    }
  };

  disambiguate.emailAddress = function(emailAddressList, entities) {
    var emailsWithTargets, i, len, part, personName, personNameGrams;
    emailsWithTargets = [];
    personName = entities.personNameList[0].value.split(' ');
    personNameGrams = [];
    for (i = 0, len = personName.length; i < len; i++) {
      part = personName[i];
      personNameGrams.push(part.substring(0, 3).toLowerCase());
    }
    return findEmailTargets(emailAddressList, personNameGrams);
  };

  findEmailTargets = function(emailAddressList, personNameGrams) {
    var emailAddress, emailsWithTargets, genericLocalPart, genericLocalParts, i, j, k, len, len1, len2, localPart, personNameGram, target, targetFound;
    genericLocalParts = ['hello', 'support', 'welcome', 'hello', 'feedback', 'info'];
    emailsWithTargets = [];
    for (i = 0, len = emailAddressList.length; i < len; i++) {
      emailAddress = emailAddressList[i];
      targetFound = false;
      localPart = emailAddress.value.split('@')[0];
      target = {};
      for (j = 0, len1 = genericLocalParts.length; j < len1; j++) {
        genericLocalPart = genericLocalParts[j];
        if (genericLocalPart === localPart) {
          target.label = 'Account';
          target.confident = true;
          targetFound = true;
        }
      }
      if (!targetFound) {
        for (k = 0, len2 = personNameGrams.length; k < len2; k++) {
          personNameGram = personNameGrams[k];
          if (localPart.indexOf(personNameGram) > -1) {
            target.label = 'Contact';
            target.confident = true;
            targetFound = true;
            break;
          }
        }
      }
      if (!targetFound) {
        target.label = 'Account';
      }
      emailAddress.target = target;
      emailsWithTargets.push(emailAddress);
    }
    return emailsWithTargets;
  };

  module.exports = disambiguate;

}).call(this);

// Generated by CoffeeScript 1.10.0
(function() {
  var Mapper,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Mapper = (function() {
    function Mapper(domainTypes) {
      this.addClass = bind(this.addClass, this);
      this.addFeatures = bind(this.addFeatures, this);
      var domainType, i, len;
      this.features = {};
      this.classes = [];
      for (i = 0, len = domainTypes.length; i < len; i++) {
        domainType = domainTypes[i];
        this.addClass(domainType);
        this.addFeatures(domainType);
      }
    }

    Mapper.prototype.addFeatures = function(domainType) {
      var feature, i, len, ref, results;
      ref = domainType.fields;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        feature = ref[i];
        if (this.features[feature.name] != null) {
          this.features[feature.name].push(domainType.name);
        }
        if (this.features[feature.name] == null) {
          results.push(this.features[feature.name] = [domainType.name]);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Mapper.prototype.addClass = function(domainType) {
      domainType.requires = function(requiredField) {
        var field, i, len, ref;
        ref = this.fields;
        for (i = 0, len = ref.length; i < len; i++) {
          field = ref[i];
          if (field.name === requiredField && field.required) {
            return true;
          }
        }
        return false;
      };
      return this.classes.push(domainType);
    };

    Mapper.prototype.getClassesFromFeature = function(feature) {
      return this.features[feature];
    };

    return Mapper;

  })();

  module.exports = Mapper;

}).call(this);

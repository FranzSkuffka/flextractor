// Generated by CoffeeScript 1.10.0
(function() {
  var Classifier, Mapper, _, brain, train;

  brain = require('brain');

  _ = require('underscore');

  train = require('./trainer');

  Mapper = require('./mapper');

  Classifier = (function() {
    function Classifier(domainTypes) {
      this.mapper = new Mapper(domainTypes);
      this.net = train(new brain.NeuralNetwork(), domainTypes);
      this.features = this.mapper.features;
      this.labels = this.mapper.classes;
    }

    Classifier.prototype.classify = function(recognizedFeatures) {
      return new Promise((function(_this) {
        return function(resolve) {
          var assignedLabels, confidences, feature, featureDimension, featureVector, i, j, label, labelDimension, len, len1, recognizedFeature, ref;
          featureVector = Array.apply(null, Array(Object.keys(_this.features).length)).map(Number.prototype.valueOf, 0);
          featureDimension = 0;
          if (recognizedFeatures.length > 0) {
            for (feature in _this.features) {
              for (i = 0, len = recognizedFeatures.length; i < len; i++) {
                recognizedFeature = recognizedFeatures[i];
                if (recognizedFeature === feature) {
                  featureVector[featureDimension] = 1;
                }
              }
              featureDimension++;
            }
          }
          confidences = _this.net.run(featureVector);
          assignedLabels = [];
          labelDimension = 0;
          ref = _this.labels;
          for (j = 0, len1 = ref.length; j < len1; j++) {
            label = ref[j];
            if (confidences[labelDimension] > 0.1) {
              assignedLabels.push(label.name);
            }
            labelDimension++;
          }
          return resolve(assignedLabels);
        };
      })(this));
    };

    return Classifier;

  })();

  module.exports = Classifier;

}).call(this);
